Free and open-source software (FOSS) is a term used to refer to groups of software consisting of both free software and open-source software. Where anyone is freely
licensed to use, copy, study, and change the software in any way, and the source code is openly shared so that people are encouraged to voluntarily improve the design
of the software. This is in contrast to proprietary software, where the software is under restrictive copyright licensing and the source code is usually hidden
from the users.

FOSS maintains the software user's civil liberty rights. Other benefits of using FOSS can include decreased software costs,
increased security and stability (especially in regard to malware), protecting privacy, education, and giving users more control over their own hardware. Free and
open-source operating systems such as Linux and descendants of BSD are widely utilized today, powering millions of servers, desktops, smartphones (e.g., Android),
and other devices. Free-software licenses and open-source licenses are used by many software packages. The free software movement and the open-source software
movement are online social movements behind widespread production and adoption of FOSS, with the former preferring to use the terms FLOSS or free/libre.

Overview
Further information: Alternative terms for free software
"Free and open-source software" (FOSS) is an umbrella term for software that is simultaneously considered both free software and open-source software. FOSS (free and
open-source software) allows the user to inspect the source code and provides a high level of control of the software's functions compared to proprietary software. The
term "free software" does not refer to the monetary cost of the software at all, but rather whether the license maintains the software user's civil liberties ("free” as
in “free speech,” not as in “free beer”).[3] There are a number of related terms and abbreviations for free and open-source software (FOSS or F/OSS), or free/libre and
open-source software (FLOSS or F/LOSS is preferred by FSF over FOSS, while free or free/libre is their preferred term).[6]

Although there is almost a complete overlap between free-software licenses and open-source-software licenses, there is a strong philosophical disagreement between the
advocates of these two positions. The terminology of FOSS or "Free and Open-source software" was created to be a neutral on these philosophical disagreements between
the FSF and OSI and have a single unified term that could refer to both concepts.[7]

Free software
Richard Stallman's Free Software Definition, adopted by the Free Software Foundation (FSF), defines free software as a matter of liberty not price,[8][9] and it upholds
the Four Essential Freedoms. The earliest-known publication of the definition of his free-software idea was in the February 1986 edition[10] of the FSF's now-discontinued
GNU's Bulletin publication. The canonical source for the document is in the philosophy section of the GNU Project website. As of August 2017, it is published in 40
languages.[11]

Four essential freedoms of Free Software
To meet the definition of "free software", the FSF requires the software's licensing respect the civil liberties / human rights of what the FSF calls the software user's
"Four Essential Freedoms".[12]

The freedom to run the program as you wish, for any purpose (freedom 0).
The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.
The freedom to redistribute copies so you can help others (freedom 2).
The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. 
Access to the source code is a precondition for this.[12]

Open source
The Open Source Definition is used by the Open Source Initiative (OSI) to determine whether a software license qualifies for the organization's insignia for open-source
software. The definition was based on the Debian Free Software Guidelines, written and adapted primarily by Bruce Perens.[13][14] Perens did not base his writing on the
Four Essential Freedoms of free software from the Free Software Foundation, which were only later available on the web.[15] Perens subsequently stated that he felt Eric
Raymond's promotion of open-source unfairly overshadowed the Free Software Foundation's efforts and reaffirmed his support for free software.[16] In the following 2000s,
he spoke about open source again.[17][18]

History

From the 1950s and on through the 1980s, it was common for computer users to have the source code for all programs they used, and the permission and ability to modify
it for their own use.
By the late 1960s, the prevailing business model around software was changing. A growing and evolving software industry was competing with the hardware manufacturer's 
bundled software products; rather than funding software development from hardware revenue, these new companies were selling software directly. Leased machines required
software support while providing no revenue for software, and some customers who were able to better meet their own needs did not want the costs of software bundled with
hardware product costs. In United States vs. IBM, filed January 17, 1969, the government charged that bundled software was anticompetitive. While some software was
still being provided without monetary cost and license restriction, there was a growing amount of software that was only at a monetary cost with restricted licensing.
In the 1970s and early 1980s, some parts of the software industry began using technical measures (such as distributing only binary copies of computer programs) to prevent
computer users from being able to use reverse engineering techniques to study and customize software they had paid for. In 1980, the copyright law was extended to computer
programs in the United States—previously, computer programs could be considered ideas, procedures, methods, systems, and processes, which are not copyrightable.

Early on, closed-source software was uncommon until the mid-1970s to the 1980s, when IBM implemented in 1983 an "object code only" policy, no longer distributing source code.

In 1983, Richard Stallman, longtime member of the hacker community at the MIT Artificial Intelligence Laboratory, announced the GNU project, saying that he had become frustrated
with the effects of the change in culture of the computer industry and its users.[29] Software development for the GNU operating system began in January 1984, and the Free Software
Foundation (FSF) was founded in October 1985. An article outlining the project and its goals was published in March 1985 titled the GNU Manifesto. The manifesto included significant
explanation of the GNU philosophy, Free Software Definition and "copyleft" ideas. The FSF takes the position that the fundamental issue Free software addresses is an ethical one—to
ensure software users can exercise what it calls "The Four Essential Freedoms".[3]

The Linux kernel, created by Linus Torvalds, was released as freely modifiable source code in 1991. Initially, Linux was not released under either a Free software or an Open-source
software license. However, with version 0.12 in February 1992, he relicensed the project under the GNU General Public License.[30]

FreeBSD and NetBSD (both derived from 386BSD) were released as Free software when the USL v. BSDi lawsuit was settled out of court in 1993. OpenBSD forked from NetBSD in 1995. Also
in 1995, The Apache HTTP Server, commonly referred to as Apache, was released under the Apache License 1.0.

In 1997, Eric Raymond published The Cathedral and the Bazaar, a reflective analysis of the hacker community and Free software principles. The paper received significant attention
in early 1998, and was one factor in motivating Netscape Communications Corporation to release their popular Netscape Communicator Internet suite as Free software. This code is
today better known as Mozilla Firefox and Thunderbird.

Netscape's act prompted Raymond and others to look into how to bring the FSF's Free software ideas and perceived benefits to the commercial software industry. They concluded that FSF's
social activism was not appealing to companies like Netscape, and looked for a way to rebrand the Free software movement to emphasize the business potential of sharing and collaborating
on software source code. The new name they chose was "Open-source", and quickly Bruce Perens, publisher Tim O'Reilly, Linus Torvalds, and others signed on to the rebranding. The Open
Source Initiative was founded in February 1998 to encourage the use of the new term and evangelize open-source principles.[31]

While the Open Source Initiative sought to encourage the use of the new term and evangelize the principles it adhered to, commercial software vendors found themselves increasingly
threatened by the concept of freely distributed software and universal access to an application's source code. A Microsoft executive publicly stated in 2001 that "Open-source is an
intellectual property destroyer. I can't imagine something that could be worse than this for the software business and the intellectual-property business."[32] This view perfectly
summarizes the initial response to FOSS by some software corporations.[citation needed] For many years FOSS played a niche role outside of the mainstream of private software
development. However the success of FOSS Operating Systems such as Linux, BSD and the companies based on FOSS such as Red Hat, has changed the software industry's attitude and there
has been a dramatic shift in the corporate philosophy concerning its development.[33]

Usage
See also: Linux adoption, Free software § Adoption, and Open-source software § Adoption
FOSS benefits over proprietary software
Personal control, customizability and freedom
See also: Vendor lock-in
Users of FOSS benefit from the Four Essential Freedoms to make unrestricted use of, and to study, copy, modify, and redistribute such software with or without modification. If they
would like to change the functionality of software they can bring about changes to the code and, if they wish, distribute such modified versions of the software or often − depending
on the software's decision making model and its other users − even push or request such changes to be made via updates to the original software.[34][35][36][37][38]

Privacy and security
See also: Open-source software security, Surveillance capitalism, Global surveillance disclosures (2013–present), and Software update system
Manufacturers of proprietary, closed-source software are sometimes pressured to building in backdoors or other covert, undesired features into their software.
Instead of having to trust software vendors, users of FOSS can inspect and verify the source code themselves and can put trust on a community of volunteers and users.
As proprietary code is typically hidden from public view, only the vendors themselves and hackers may be aware of any vulnerabilities in them[38] while FOSS involves as many people
as possible for exposing bugs quickly.[43][44]

Low costs or no costs
FOSS is often free of charge although donations are often encouraged. This also allows users to better test and compare software.[38]

Quality, collaboration and efficiency
See also: § Bugs and missing features
FOSS allows for better collaboration among various parties and individuals with the goal of developing the most efficient software for its users or use-cases while proprietary software
is typically meant to generate profits. Furthermore, in many cases more organizations and individuals contribute to such projects than to proprietary software.[38] It has been shown that
technical superiority is typically the primary reason why companies choose open source software.[38]

Drawbacks compared to proprietary software
Security and user-support
See also: Common good, Public participation, and Proactive cyber defence § Measures
According to Linus's law the more people who can see and test a set of code, the more likely any flaws will be caught and fixed quickly. However, this does not guarantee a high level of
participation. Having a grouping of full-time professionals behind a commercial product can in some cases be superior to FOSS.[38][43][45]

Furthermore, publicized source code might make it easier for hackers to find vulnerabilities in it and write exploits. This however assumes that such malicious hackers are more effective
than white hat hackers which responsibly disclose or help fix the vulnerabilities, that no code leaks or exfiltrations occur and that reverse engineering of proprietary code is a
hindrance of significance for malicious hackers.[43]

Hardware and software compatibility
Further information: Software incompatibility and System requirements
Sometimes, FOSS is not compatible with proprietary hardware or specific software. This is often due to manufacturers obstructing FOSS such as by not disclosing the interfaces or other
specifications needed for members of the FOSS movement to write drivers for their hardware - for instance as they wish customers to run only their own proprietary software or as they
might benefit from partnerships.[46][47][48][49][50][51][52]

Bugs and missing features
See also: § Quality, collaboration and efficiency
While FOSS can be superior to proprietary equivalents in terms of software features and stability, in many cases it has more unfixed bugs and missing features when compared to similar
commercial software.[53][additional citation(s) needed] This varies per case, and usually depends on the level of interest in a particular project. However, unlike close-sourced
software, improvements can be made by anyone who has the motivation, time and skill to do so.[45][additional citation(s) needed]

A common obstacle in FOSS development is the lack of access to some common official standards, due to costly royalties or required non-disclosure agreements (e.g., for the DVD-Video
format).[54]

Less guarantee of development
There is often less certainty of FOSS projects gaining the required resources and participation for continued development than commercial software backed by companies.[55][additional
citation(s) needed] However, companies also often abolish projects for being unprofitable, yet large companies may rely on, and hence co-develop, open source software.[44] On the other
hand, if the vendor of proprietary software ceases development, there are no alternatives; whereas with FOSS, any user who needs it still has the right, and the source-code, to continue
to develop it themself, or pay a 3rd party to do so.

Missing applications
As the FOSS operating system distributions of Linux has a lower market share of end users there are also fewer applications available.



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Microsoft Office – LibreOffice
If you’ve ever used a computer then you’ve come across Microsoft’s suite of Office products: Word, Excel, PowerPoint, Outlook, Publisher, Access, etc. Microsoft Office products remain some of the most
popular and widely used in the world, but if you’re ready for an open-source alternative, try LibreOffice. It includes a word processor, spreadsheet, presentation designer, diagram maker, 
database editor, and more.

Google Drive – Nextcloud
Google Drive’s collaborative, easy-to-use file sharing features make it a popular choice for many people. But Google has been heavily criticized over privacy concerns and selling data. An open-source
alternative such as Nextcloud might be a better solution for you. Nextcloud is a self-hosted productivity platform that allows you to sync and store files, conduct calls and meetings over the web, and manage
calendars, contacts, and mail. You control where you put your data, so you can be sure it’s more secure.

Google Chrome – Mozilla Firefox
Concerning criticism over privacy concerns, Google Chrome hasn’t fared much better than Drive. The release of Chrome’s tracking algorithm FLoC (Federated Learning of Cohorts) has many users worried about 
their privacy while browsing with Chrome. If you want to avoid Google’s creepy trackers, try the open-source web browser Firefox. Firefox has stronger default privacy settings in place than Chrome.

YouTube – PeerTube
YouTube, being owned by Google, raises privacy concerns for some. For an open-source alternative try PeerTube, a decentralized, federated video platform. Because of the peer-to-peer playback that allows 
users to share videos, PeerTube takes up less bandwidth and requires smaller hardware to operate than YouTube.

Grammarly – Language Tool
Grammarly is a helpful tool that makes grammar suggestions on anything you write. You can install it as an add-on in a word processor, or as an extension on a web browser. However, if you don’t like the idea of 
Grammarly’s servers holding onto your text, you might feel better using the open-source Language Tool. Language Tool is also a free grammar checker, and it works with more than 20 languages.

Windows Media Player – VLC
Instead of using Windows’ default media player, try VLC. You can use it across platforms to watch media files, DVDs, audio CDs, VCDs, and you can stream media with it. VLC will play practically anything on 
practically any device or platform. It’s available on desktop and mobile, including iOS and Android.

Slack – Mattermost
The instant messaging and collaborative communication app Slack is a popular choice for remote workplaces. If you and your team want an open-source messaging app instead, Mattermost is a self-hostable 
online chat service. It also lets you take full control of your data, so you can protect your company’s privacy.

Adobe Photoshop – GIMP
Adobe Photoshop is an industry leader in graphics and photo editing software, but it can be expensive. If you want a quality photo editing software that’s free and open-source, try GIMP. It has fewer features 
than Photoshop, but for most users, it’s more than adequate.

LastPass – Bitwarden
Password management is essential for today’s digital age, as you likely have dozens of accounts to keep track of. LastPass is a useful tool for keeping your passwords in one place, but it’s not open-source. 
Bitwarden is a good alternative, offering syncing across multiple devices. Unlike LastPass, Bitwarden requires an app or software download to use.

Windows – Linux
If you want to commit to going completely open-source, then try replacing your operating system with Linux. Linux is entirely free, open-source, and has thousands of distributions to choose from, so you can 
find the one that fits you perfectly. Some Linux distributions are even designed for former Windows users. A good starting point with Linux is Ubuntu, as it’s widely supported and easy to use.

Choosing open-source
As you can see, it’s not hard to find alternatives to your favorite software and applications, especially if they’re popular. An easy way to find alternatives is with the site alternativeto.net, which lets you 
search any program, software, or application for similar ones. You can see which software is open-source and proprietary, as well as free or paid. Good luck on your journey to open-source software!

